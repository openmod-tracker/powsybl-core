#
# Copyright (c) 2025, RTE (http://www.rte-france.com)
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# SPDX-License-Identifier: MPL-2.0
#

# query: fullModels
prefix md: <http://iec.ch/TC57/61970-552/ModelDescription/1#>
SELECT *
{ GRAPH ?graph {
    ?FullModel
        a md:FullModel ;
        md:Model.scenarioTime ?scenarioTime ;
        md:Model.created ?created ;
        md:Model.version ?version ;
        md:Model.modelingAuthoritySet ?modelingAuthoritySet .
    {
    SELECT ?FullModel (group_concat(?profile; separator=" ") as ?profileList)
        WHERE {
                ?FullModel md:Model.profile ?profile .
        } GROUP BY ?FullModel
    }
    OPTIONAL { ?FullModel md:Model.description ?description }
    OPTIONAL {
        SELECT ?FullModel (group_concat(?dependentOn; separator=" ") as ?dependentOnList)
            WHERE {
                    ?FullModel md:Model.DependentOn ?dependentOn .
            } GROUP BY ?FullModel
    }
    OPTIONAL {
        SELECT ?FullModel (group_concat(?supersedes; separator=" ") as ?supersedesList)
            WHERE {
                    ?FullModel md:Model.Supersedes ?supersedes .
            } GROUP BY ?FullModel
    }
}}

# query: numObjectsByType
# Only types in a namespace given as parameter
SELECT ?Type (COUNT (DISTINCT ?object) AS ?numObjects)
{ GRAPH ?graph {
     ?object a ?Type .
    FILTER (STRSTARTS(STR(?Type), "{0}"))
}}
GROUP BY ?Type

# query: allObjectsOfType
SELECT *
{ GRAPH ?graph {
     ?object a cim:{0} ;
     ?attribute ?value .
}}

# query: terminals
# we cannot access the 'inService' Status
SELECT *
{
    {
        SELECT DISTINCT ?Terminal
        WHERE {
            {
                ?Terminal a cim:Terminal .
            }
            UNION
            {
                SELECT ?Terminal
                WHERE {
                    ?SvPowerFlow a cim:SvPowerFlow ;
                        cim:SvPowerFlow.Terminal ?Terminal .
                }
            }
        }
    }
    OPTIONAL {
        ?Terminal cim:ACDCTerminal.connected ?connected .
    }
    OPTIONAL {
        ?SvPowerFlow a cim:SvPowerFlow ;
            cim:SvPowerFlow.Terminal ?Terminal ;
            cim:SvPowerFlow.p ?p ;
            cim:SvPowerFlow.q ?q .
    }
    OPTIONAL {
        ?Terminal cim:Terminal.TopologicalNode ?TopologicalNode .
    }
}

# query: energyConsumers
SELECT *
{
    ?EnergyConsumer a ?type ;
            cim:EnergyConsumer.p ?p ;
            cim:EnergyConsumer.q ?q .
    VALUES ?type { cim:EnergyConsumer cim:ConformLoad cim:NonConformLoad cim:StationSupply }
}

# query: energySources
SELECT *
{
    ?EnergySource a cim:EnergySource ;
            cim:EnergySource.activePower ?p ;
            cim:EnergySource.reactivePower ?q
}

# query: asynchronousMachines
SELECT *
{
    ?AsynchronousMachine a cim:AsynchronousMachine ;
        cim:AsynchronousMachine.asynchronousMachineType ?type ;
        cim:RotatingMachine.p ?p ;
        cim:RotatingMachine.q ?q ;
        cim:RegulatingCondEq.controlEnabled ?controlEnabled
}

